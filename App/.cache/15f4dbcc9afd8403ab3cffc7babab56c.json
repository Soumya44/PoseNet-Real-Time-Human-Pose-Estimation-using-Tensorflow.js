{"dependencies":[{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\package.json","includedInParent":true,"mtime":1529579045748},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\.babelrc","includedInParent":true,"mtime":1529333884000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\node_modules\\@tensorflow\\tfjs-converter\\package.json","includedInParent":true,"mtime":1527874713000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\node_modules\\@tensorflow\\tfjs-converter\\.babelrc","includedInParent":true,"mtime":1526934916000},{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":21}},{"name":"./utils","loc":{"line":2,"column":30}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CATEGORY = exports.executeOp = undefined;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar executeOp = exports.executeOp = function (node, tensorMap, context) {\n    switch (node.op) {\n        case 'batchNormalization':\n            {\n                return [tfc.batchNormalization((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('mean', node, tensorMap, context), (0, _utils.getParamValue)('variance', node, tensorMap, context), (0, _utils.getParamValue)('epsilon', node, tensorMap, context), (0, _utils.getParamValue)('scale', node, tensorMap, context), (0, _utils.getParamValue)('offset', node, tensorMap, context))];\n            }\n        case 'localResponseNormalization':\n            {\n                return [tfc.localResponseNormalization((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('radius', node, tensorMap, context), (0, _utils.getParamValue)('bias', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context), (0, _utils.getParamValue)('beta', node, tensorMap, context))];\n            }\n        case 'softmax':\n            {\n                return [tfc.softmax((0, _utils.getParamValue)('x', node, tensorMap, context))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nvar CATEGORY = exports.CATEGORY = 'normalization';\n//# sourceMappingURL=normalization_executor.js.map"},"hash":"6eb1a817fe8e13dc1bd41b6484976dc5","cacheData":{"env":{}}}