{"dependencies":[{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\package.json","includedInParent":true,"mtime":1529579045748},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\.babelrc","includedInParent":true,"mtime":1529333884000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"..","loc":{"line":1,"column":29}},{"name":"../ops/array_ops","loc":{"line":2,"column":25}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.castTensor = castTensor;\nexports.reshapeTensor = reshapeTensor;\n\nvar _ = require('..');\n\nvar _array_ops = require('../ops/array_ops');\n\nfunction castTensor(x, dtype, backend) {\n    if (!_.util.hasEncodingLoss(x.dtype, dtype)) {\n        return _.Tensor.make(x.shape, { dataId: x.dataId }, dtype);\n    }\n    if (dtype === 'int32') {\n        return backend.int(x);\n    } else if (dtype === 'bool') {\n        return backend.notEqual(x, _array_ops.ArrayOps.scalar(0, x.dtype));\n    } else {\n        throw new Error(\"Error in Cast: unknown dtype argument (\" + dtype + \")\");\n    }\n}\nfunction reshapeTensor(x, shape) {\n    return _.Tensor.make(shape, { dataId: x.dataId }, x.dtype);\n}\n//# sourceMappingURL=backend_util.js.map"},"hash":"a38b79ae370cd2e1e6517261412231f4","cacheData":{"env":{}}}