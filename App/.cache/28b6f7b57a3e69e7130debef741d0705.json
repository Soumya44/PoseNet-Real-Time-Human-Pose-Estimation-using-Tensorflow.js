{"dependencies":[{"name":"C:\\Users\\User\\Desktop\\posenet\\demos\\package.json","includedInParent":true,"mtime":1529665731808},{"name":"C:\\Users\\User\\Desktop\\posenet\\demos\\.babelrc","includedInParent":true,"mtime":1529333884000},{"name":"C:\\Users\\User\\Desktop\\posenet\\demos\\node_modules\\@tensorflow-models\\posenet\\package.json","includedInParent":true,"mtime":1529667037240},{"name":"@tensorflow/tfjs","loc":{"line":1,"column":20}},{"name":"../keypoints","loc":{"line":2,"column":30}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getPointsConfidence = getPointsConfidence;\nexports.getOffsetVectors = getOffsetVectors;\nexports.getOffsetPoints = getOffsetPoints;\n\nvar _tfjs = require('@tensorflow/tfjs');\n\nvar tf = _interopRequireWildcard(_tfjs);\n\nvar _keypoints = require('../keypoints');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction getPointsConfidence(heatmapScores, heatMapCoords) {\n    var numKeypoints = heatMapCoords.shape[0];\n    var result = new Float32Array(numKeypoints);\n    for (var keypoint = 0; keypoint < numKeypoints; keypoint++) {\n        var y = heatMapCoords.get(keypoint, 0);\n        var x = heatMapCoords.get(keypoint, 1);\n        result[keypoint] = heatmapScores.get(y, x, keypoint);\n    }\n    return result;\n}\nfunction getOffsetPoint(y, x, keypoint, offsetsBuffer) {\n    return {\n        y: offsetsBuffer.get(y, x, keypoint),\n        x: offsetsBuffer.get(y, x, keypoint + _keypoints.NUM_KEYPOINTS)\n    };\n}\nfunction getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer) {\n    var result = [];\n    for (var keypoint = 0; keypoint < _keypoints.NUM_KEYPOINTS; keypoint++) {\n        var heatmapY = heatMapCoordsBuffer.get(keypoint, 0).valueOf();\n        var heatmapX = heatMapCoordsBuffer.get(keypoint, 1).valueOf();\n        var _a = getOffsetPoint(heatmapY, heatmapX, keypoint, offsetsBuffer),\n            x = _a.x,\n            y = _a.y;\n        result.push(y);\n        result.push(x);\n    }\n    return tf.tensor2d(result, [_keypoints.NUM_KEYPOINTS, 2]);\n}\nfunction getOffsetPoints(heatMapCoordsBuffer, outputStride, offsetsBuffer) {\n    return tf.tidy(function () {\n        var offsetVectors = getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer);\n        return heatMapCoordsBuffer.toTensor().mul(tf.scalar(outputStride, 'int32')).toFloat().add(offsetVectors);\n    });\n}\n//# sourceMappingURL=util.js.map"},"hash":"ea32c3de0ff3564015acd1cb580c04e8","cacheData":{"env":{}}}