{"dependencies":[{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\package.json","includedInParent":true,"mtime":1529579045748},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\.babelrc","includedInParent":true,"mtime":1529333884000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"./tex_util","loc":{"line":1,"column":28}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TextureManager = undefined;\n\nvar _tex_util = require('./tex_util');\n\nvar TextureManager = function () {\n    function TextureManager(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.allocatedTextures = [];\n        this.usedTextureCount = {};\n    }\n    TextureManager.prototype.acquireTexture = function (shapeRC, texType) {\n        if (texType === void 0) {\n            texType = _tex_util.TextureType.FLOAT;\n        }\n        var shapeKey = getKeyFromTextureShape(shapeRC, texType);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextureCount)) {\n            this.usedTextureCount[shapeKey] = 0;\n        }\n        this.usedTextureCount[shapeKey]++;\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this.log();\n            return this.freeTextures[shapeKey].shift();\n        }\n        this.numUsedTextures++;\n        this.log();\n        var newTexture = this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);\n        this.allocatedTextures.push(newTexture);\n        return newTexture;\n    };\n    TextureManager.prototype.releaseTexture = function (texture, shape, texType) {\n        if (texType === void 0) {\n            texType = _tex_util.TextureType.FLOAT;\n        }\n        var shapeKey = getKeyFromTextureShape(shape, texType);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        this.freeTextures[shapeKey].push(texture);\n        this.numFreeTextures++;\n        this.numUsedTextures--;\n        this.usedTextureCount[shapeKey]--;\n        this.log();\n    };\n    TextureManager.prototype.log = function () {\n        if (!this.logEnabled) {\n            return;\n        }\n        var total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + total + \")\");\n    };\n    TextureManager.prototype.getNumUsedTextures = function () {\n        return this.numUsedTextures;\n    };\n    TextureManager.prototype.getNumFreeTextures = function () {\n        return this.numFreeTextures;\n    };\n    TextureManager.prototype.dispose = function () {\n        var _this = this;\n        if (this.allocatedTextures == null) {\n            return;\n        }\n        this.allocatedTextures.forEach(function (texture) {\n            _this.gpgpu.deleteMatrixTexture(texture);\n        });\n        this.freeTextures = null;\n        this.allocatedTextures = null;\n        this.usedTextureCount = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n    };\n    return TextureManager;\n}();\nexports.TextureManager = TextureManager;\n\nfunction getKeyFromTextureShape(shapeRowsCol, texType) {\n    return shapeRowsCol[0] + \"_\" + shapeRowsCol[1] + \"_\" + texType;\n}\n//# sourceMappingURL=texture_manager.js.map"},"hash":"85fad6a52485eedb62fe5116a596f569","cacheData":{"env":{}}}