{"dependencies":[{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\package.json","includedInParent":true,"mtime":1529579045748},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\.babelrc","includedInParent":true,"mtime":1529333884000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\node_modules\\@tensorflow\\tfjs-converter\\package.json","includedInParent":true,"mtime":1527874713000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\node_modules\\@tensorflow\\tfjs-converter\\.babelrc","includedInParent":true,"mtime":1526934916000},{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":21}},{"name":"./utils","loc":{"line":2,"column":30}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CATEGORY = exports.executeOp = undefined;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar executeOp = exports.executeOp = function (node, tensorMap, context) {\n    switch (node.op) {\n        case 'equal':\n            {\n                return [tfc.equal((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'notEqual':\n            {\n                return [tfc.notEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'greater':\n            {\n                return [tfc.greater((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'greaterEqual':\n            {\n                return [tfc.greaterEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'less':\n            {\n                return [tfc.less((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'lessEqual':\n            {\n                return [tfc.lessEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'logicalAnd':\n            {\n                return [tfc.logicalAnd((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'logicalNot':\n            {\n                return [tfc.logicalNot((0, _utils.getParamValue)('a', node, tensorMap, context))];\n            }\n        case 'logicalOr':\n            {\n                return [tfc.logicalOr((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        case 'where':\n            {\n                return [tfc.where((0, _utils.getParamValue)('condition', node, tensorMap, context), (0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nvar CATEGORY = exports.CATEGORY = 'logical';\n//# sourceMappingURL=logical_executor.js.map"},"hash":"121a441074f85dd836e4f142c8efefdc","cacheData":{"env":{}}}