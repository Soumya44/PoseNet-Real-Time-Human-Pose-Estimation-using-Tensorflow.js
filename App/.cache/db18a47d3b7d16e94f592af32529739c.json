{"dependencies":[{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\.babelrc","includedInParent":true,"mtime":1529333884000},{"name":"C:\\Users\\User\\Desktop\\posenet\\PoseNet_Demo\\package.json","includedInParent":true,"mtime":1529579045748},{"name":"babel-runtime/core-js/promise"},{"name":"@tensorflow-models/posenet","loc":{"line":1,"column":25}},{"name":"dat.gui","loc":{"line":2,"column":16}},{"name":"stats.js","loc":{"line":3,"column":18}},{"name":"./demo_util","loc":{"line":4,"column":42}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.bindPage = bindPage;\n\nvar _posenet = require('@tensorflow-models/posenet');\n\nvar posenet = _interopRequireWildcard(_posenet);\n\nvar _dat = require('dat.gui');\n\nvar _dat2 = _interopRequireDefault(_dat);\n\nvar _stats = require('stats.js');\n\nvar _stats2 = _interopRequireDefault(_stats);\n\nvar _demo_util = require('./demo_util');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst videoWidth = 1000;\nconst videoHeight = 600;\nconst stats = new _stats2.default();\n\n/*Loads Camera*/\nasync function setupCamera() {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw new Error('Browser API navigator.mediaDevices.getUserMedia not available');\n  }\n\n  const video = document.getElementById('video');\n  video.width = videoWidth;\n  video.height = videoHeight;\n\n  const mobile = isMobile();\n  const stream = await navigator.mediaDevices.getUserMedia({\n    'audio': false,\n    'video': {\n      facingMode: 'user',\n      width: mobile ? undefined : videoWidth,\n      height: mobile ? undefined : videoHeight\n    }\n  });\n  video.srcObject = stream;\n\n  return new _promise2.default(resolve => {\n    video.onloadedmetadata = () => {\n      resolve(video);\n    };\n  });\n}\n\nasync function loadVideo() {\n  const video = await setupCamera();\n  video.play();\n\n  return video;\n}\n\nconst guiState = {\n  algorithm: 'multi-pose',\n  input: {\n    mobileNetArchitecture: isMobile() ? '0.50' : '0.75',\n    outputStride: 16,\n    imageScaleFactor: 0.5\n  },\n  singlePoseDetection: {\n    minPoseConfidence: 0.1,\n    minPartConfidence: 0.5\n  },\n  multiPoseDetection: {\n    maxPoseDetections: 5,\n    minPoseConfidence: 0.15,\n    minPartConfidence: 0.1,\n    nmsRadius: 30.0\n  },\n  output: {\n    showVideo: true,\n    showSkeleton: true,\n    showPoints: true\n  },\n  net: null\n};\n\n// Set up GUI\nfunction setupGui(cameras, net) {\n  guiState.net = net;\n\n  if (cameras.length > 0) {\n    guiState.camera = cameras[0].deviceId;\n  }\n\n  const gui = new _dat2.default.GUI({ width: 600 });\n}\n\n/*Sets up FPS Panel*/\nfunction setupFPS() {\n  stats.showPanel(1); // 0: fps, 1: ms, 2: mb\n  document.body.appendChild(stats.dom);\n}\n\n/*Feeds an image to posenet to estimate poses - This function loops with requestAnimationFrame()*/\nfunction detectPoseInRealTime(video, net) {\n  const canvas = document.getElementById('output');\n  const ctx = canvas.getContext('2d');\n  const flipHorizontal = true;\n\n  canvas.width = videoWidth;\n  canvas.height = videoHeight;\n\n  async function poseDetectionFrame() {\n    if (guiState.changeToArchitecture) {\n      //free up GPU memory\n      guiState.net.dispose();\n\n      // Load the PoseNet model weights for either the 0.50, 0.75, 1.00, or 1.01\n      guiState.net = await posenet.load(+guiState.changeToArchitecture);\n      guiState.changeToArchitecture = null;\n    }\n\n    // Begin monitoring code for frames per second\n    stats.begin();\n\n    const imageScaleFactor = guiState.input.imageScaleFactor;\n    const outputStride = +guiState.input.outputStride;\n\n    let poses = [];\n    let minPoseConfidence;\n    let minPartConfidence;\n    switch (guiState.algorithm) {\n      case 'single-pose':\n        const pose = await guiState.net.estimateSinglePose(video, imageScaleFactor, flipHorizontal, outputStride);\n        poses.push(pose);\n\n        minPoseConfidence = +guiState.singlePoseDetection.minPoseConfidence;\n        minPartConfidence = +guiState.singlePoseDetection.minPartConfidence;\n        break;\n      case 'multi-pose':\n        poses = await guiState.net.estimateMultiplePoses(video, imageScaleFactor, flipHorizontal, outputStride, guiState.multiPoseDetection.maxPoseDetections, guiState.multiPoseDetection.minPartConfidence, guiState.multiPoseDetection.nmsRadius);\n\n        minPoseConfidence = +guiState.multiPoseDetection.minPoseConfidence;\n        minPartConfidence = +guiState.multiPoseDetection.minPartConfidence;\n        break;\n    }\n\n    ctx.clearRect(0, 0, videoWidth, videoHeight);\n\n    if (guiState.output.showVideo) {\n      ctx.save();\n      ctx.scale(-1, 1);\n      ctx.translate(-videoWidth, 0);\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      ctx.restore();\n    }\n    //draw skeleton\n    poses.forEach(({ score, keypoints }) => {\n      if (score >= minPoseConfidence) {\n        if (guiState.output.showPoints) {\n          (0, _demo_util.drawKeypoints)(keypoints, minPartConfidence, ctx);\n        }\n        if (guiState.output.showSkeleton) {\n          (0, _demo_util.drawSkeleton)(keypoints, minPartConfidence, ctx);\n        }\n      }\n    });\n\n    // End monitoring code for frames per second\n    stats.end();\n\n    requestAnimationFrame(poseDetectionFrame);\n  }\n\n  poseDetectionFrame();\n}\n\n// Bind everything\nasync function bindPage() {\n  // Load the PoseNet model weights with architecture 0.75 default\n  const net = await posenet.load(0.5);\n\n  document.getElementById('loading').style.display = 'none';\n  document.getElementById('main').style.display = 'block';\n\n  let video;\n\n  try {\n    video = await loadVideo();\n  } catch (e) {\n    let info = document.getElementById('info');\n    info.textContent = 'this browser does not support video capture,' + 'or this device does not have a camera';\n    info.style.display = 'block';\n    throw e;\n  }\n\n  setupGui([], net);\n  setupFPS();\n  detectPoseInRealTime(video, net);\n}\n\nnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n// start binding\nbindPage();"},"hash":"9f58295611117d1848cebf74a7fa1b85","cacheData":{"env":{}}}